// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Price_Comparison_Website.Data;

#nullable disable

namespace Price_Comparison_Website.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250116212558_UpdatedListingDeletion")]
    partial class UpdatedListingDeletion
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Price_Comparison_Website.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Price_Comparison_Website.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            Name = "Electronics"
                        },
                        new
                        {
                            CategoryId = 2,
                            Name = "Tools"
                        },
                        new
                        {
                            CategoryId = 3,
                            Name = "Clothing"
                        },
                        new
                        {
                            CategoryId = 4,
                            Name = "Food"
                        },
                        new
                        {
                            CategoryId = 5,
                            Name = "Pet Items"
                        },
                        new
                        {
                            CategoryId = 6,
                            Name = "Toys"
                        },
                        new
                        {
                            CategoryId = 7,
                            Name = "Stationary"
                        },
                        new
                        {
                            CategoryId = 8,
                            Name = "Drinks"
                        },
                        new
                        {
                            CategoryId = 9,
                            Name = "Games"
                        },
                        new
                        {
                            CategoryId = 10,
                            Name = "Books"
                        },
                        new
                        {
                            CategoryId = 11,
                            Name = "Furniture"
                        },
                        new
                        {
                            CategoryId = 12,
                            Name = "Beauty"
                        },
                        new
                        {
                            CategoryId = 13,
                            Name = "Sports"
                        },
                        new
                        {
                            CategoryId = 14,
                            Name = "Health"
                        },
                        new
                        {
                            CategoryId = 15,
                            Name = "Music"
                        },
                        new
                        {
                            CategoryId = 16,
                            Name = "Movies"
                        },
                        new
                        {
                            CategoryId = 17,
                            Name = "Travel"
                        },
                        new
                        {
                            CategoryId = 18,
                            Name = "Gifts"
                        });
                });

            modelBuilder.Entity("Price_Comparison_Website.Models.PriceListing", b =>
                {
                    b.Property<int>("PriceListingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PriceListingId"));

                    b.Property<DateTime?>("DateListed")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("PurchaseUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VendorId")
                        .HasColumnType("int");

                    b.HasKey("PriceListingId");

                    b.HasIndex("ProductId");

                    b.HasIndex("VendorId");

                    b.ToTable("PriceListings");
                });

            modelBuilder.Entity("Price_Comparison_Website.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            CategoryId = 1,
                            Description = "A high-performance laptop",
                            ImageUrl = "laptop.jpg",
                            Name = "Laptop"
                        },
                        new
                        {
                            ProductId = 2,
                            CategoryId = 1,
                            Description = "Latest smartphone model",
                            ImageUrl = "smartphone.jpg",
                            Name = "Smartphone"
                        },
                        new
                        {
                            ProductId = 3,
                            CategoryId = 1,
                            Description = "Portable tablet for all your needs",
                            ImageUrl = "tablet.jpg",
                            Name = "Tablet"
                        },
                        new
                        {
                            ProductId = 4,
                            CategoryId = 2,
                            Description = "A durable hammer for all your needs",
                            ImageUrl = "hammer.jpg",
                            Name = "Hammer"
                        },
                        new
                        {
                            ProductId = 5,
                            CategoryId = 2,
                            Description = "Comprehensive screwdriver set",
                            ImageUrl = "screwdriverset.jpg",
                            Name = "Screwdriver Set"
                        },
                        new
                        {
                            ProductId = 6,
                            CategoryId = 3,
                            Description = "Cotton T-shirt in various colors",
                            ImageUrl = "tshirt.jpg",
                            Name = "T-shirt"
                        },
                        new
                        {
                            ProductId = 7,
                            CategoryId = 3,
                            Description = "Stylish denim jeans",
                            ImageUrl = "jeans.jpg",
                            Name = "Jeans"
                        },
                        new
                        {
                            ProductId = 8,
                            CategoryId = 3,
                            Description = "Warm winter jacket",
                            ImageUrl = "jacket.jpg",
                            Name = "Jacket"
                        },
                        new
                        {
                            ProductId = 9,
                            CategoryId = 4,
                            Description = "Ready-to-eat canned soup",
                            ImageUrl = "cannedsoup.jpg",
                            Name = "Canned Soup"
                        },
                        new
                        {
                            ProductId = 10,
                            CategoryId = 5,
                            Description = "A squeaky dog toy",
                            ImageUrl = "dogtoy.jpg",
                            Name = "Dog Toy"
                        },
                        new
                        {
                            ProductId = 11,
                            CategoryId = 5,
                            Description = "Healthy food for your cat",
                            ImageUrl = "catfood.jpg",
                            Name = "Cat Food"
                        },
                        new
                        {
                            ProductId = 12,
                            CategoryId = 6,
                            Description = "Colorful building blocks for kids",
                            ImageUrl = "blocks.jpg",
                            Name = "Building Blocks"
                        },
                        new
                        {
                            ProductId = 13,
                            CategoryId = 6,
                            Description = "A detailed action figure",
                            ImageUrl = "actionfigure.jpg",
                            Name = "Action Figure"
                        },
                        new
                        {
                            ProductId = 14,
                            CategoryId = 7,
                            Description = "A spiral-bound notebook",
                            ImageUrl = "notebook.jpg",
                            Name = "Notebook"
                        },
                        new
                        {
                            ProductId = 15,
                            CategoryId = 7,
                            Description = "High-quality pens in a set",
                            ImageUrl = "penset.jpg",
                            Name = "Pen Set"
                        },
                        new
                        {
                            ProductId = 16,
                            CategoryId = 8,
                            Description = "Freshly squeezed orange juice",
                            ImageUrl = "orangejuice.jpg",
                            Name = "Orange Juice"
                        },
                        new
                        {
                            ProductId = 17,
                            CategoryId = 8,
                            Description = "Refreshing sparkling water",
                            ImageUrl = "sparklingwater.jpg",
                            Name = "Sparkling Water"
                        },
                        new
                        {
                            ProductId = 18,
                            CategoryId = 8,
                            Description = "Delicious milk chocolate bar",
                            ImageUrl = "chocolatebar.jpg",
                            Name = "Chocolate Bar"
                        },
                        new
                        {
                            ProductId = 19,
                            CategoryId = 9,
                            Description = "Wooden chess set",
                            ImageUrl = "chessset.jpg",
                            Name = "Chess Set"
                        },
                        new
                        {
                            ProductId = 20,
                            CategoryId = 10,
                            Description = "A thrilling new novel",
                            ImageUrl = "novel.jpg",
                            Name = "Novel"
                        },
                        new
                        {
                            ProductId = 21,
                            CategoryId = 10,
                            Description = "An insightful science book",
                            ImageUrl = "sciencebook.jpg",
                            Name = "Science Book"
                        },
                        new
                        {
                            ProductId = 22,
                            CategoryId = 10,
                            Description = "A cookbook full of delicious recipes",
                            ImageUrl = "cookbook.jpg",
                            Name = "Cookbook"
                        },
                        new
                        {
                            ProductId = 23,
                            CategoryId = 11,
                            Description = "A modern coffee table",
                            ImageUrl = "coffeetable.jpg",
                            Name = "Coffee Table"
                        },
                        new
                        {
                            ProductId = 24,
                            CategoryId = 11,
                            Description = "Comfortable 3-seater sofa",
                            ImageUrl = "sofa.jpg",
                            Name = "Sofa"
                        },
                        new
                        {
                            ProductId = 25,
                            CategoryId = 12,
                            Description = "Shampoo for all hair types",
                            ImageUrl = "shampoo.jpg",
                            Name = "Shampoo"
                        },
                        new
                        {
                            ProductId = 26,
                            CategoryId = 13,
                            Description = "High-quality football",
                            ImageUrl = "football.jpg",
                            Name = "Football"
                        },
                        new
                        {
                            ProductId = 27,
                            CategoryId = 13,
                            Description = "Wooden baseball bat",
                            ImageUrl = "baseballbat.jpg",
                            Name = "Baseball Bat"
                        },
                        new
                        {
                            ProductId = 28,
                            CategoryId = 14,
                            Description = "Multivitamins for daily health",
                            ImageUrl = "vitamins.jpg",
                            Name = "Vitamins"
                        },
                        new
                        {
                            ProductId = 29,
                            CategoryId = 14,
                            Description = "Whey protein powder",
                            ImageUrl = "proteinpowder.jpg",
                            Name = "Protein Powder"
                        },
                        new
                        {
                            ProductId = 30,
                            CategoryId = 14,
                            Description = "Non-slip yoga mat",
                            ImageUrl = "yogamat.jpg",
                            Name = "Yoga Mat"
                        });
                });

            modelBuilder.Entity("Price_Comparison_Website.Models.UserViewingHistory", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("UserViewingHistories");
                });

            modelBuilder.Entity("Price_Comparison_Website.Models.UserWishList", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("UserWishLists");
                });

            modelBuilder.Entity("Price_Comparison_Website.Models.Vendor", b =>
                {
                    b.Property<int>("VendorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VendorId"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VendorUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VendorId");

                    b.ToTable("Vendors");

                    b.HasData(
                        new
                        {
                            VendorId = 1,
                            Name = "Amazon",
                            VendorUrl = "https://www.amazon.com"
                        },
                        new
                        {
                            VendorId = 2,
                            Name = "eBay",
                            VendorUrl = "https://www.ebay.com"
                        },
                        new
                        {
                            VendorId = 3,
                            Name = "Best Buy",
                            VendorUrl = "https://www.bestbuy.com"
                        },
                        new
                        {
                            VendorId = 4,
                            Name = "Target",
                            VendorUrl = "https://www.target.com"
                        },
                        new
                        {
                            VendorId = 5,
                            Name = "Home Depot",
                            VendorUrl = "https://www.homedepot.com"
                        },
                        new
                        {
                            VendorId = 6,
                            Name = "Ikea",
                            VendorUrl = "https://www.ikea.com"
                        },
                        new
                        {
                            VendorId = 7,
                            Name = "AliExpress",
                            VendorUrl = "https://www.aliexpress.com"
                        },
                        new
                        {
                            VendorId = 8,
                            Name = "Etsy",
                            VendorUrl = "https://www.etsy.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Price_Comparison_Website.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Price_Comparison_Website.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Price_Comparison_Website.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Price_Comparison_Website.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Price_Comparison_Website.Models.PriceListing", b =>
                {
                    b.HasOne("Price_Comparison_Website.Models.Product", "Product")
                        .WithMany("PriceListings")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Price_Comparison_Website.Models.Vendor", "Vendor")
                        .WithMany("PriceListings")
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("Price_Comparison_Website.Models.Product", b =>
                {
                    b.HasOne("Price_Comparison_Website.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Price_Comparison_Website.Models.UserViewingHistory", b =>
                {
                    b.HasOne("Price_Comparison_Website.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Price_Comparison_Website.Models.ApplicationUser", "User")
                        .WithMany("ViewingHistory")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Price_Comparison_Website.Models.UserWishList", b =>
                {
                    b.HasOne("Price_Comparison_Website.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Price_Comparison_Website.Models.ApplicationUser", "User")
                        .WithMany("WishList")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Price_Comparison_Website.Models.ApplicationUser", b =>
                {
                    b.Navigation("ViewingHistory");

                    b.Navigation("WishList");
                });

            modelBuilder.Entity("Price_Comparison_Website.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Price_Comparison_Website.Models.Product", b =>
                {
                    b.Navigation("PriceListings");
                });

            modelBuilder.Entity("Price_Comparison_Website.Models.Vendor", b =>
                {
                    b.Navigation("PriceListings");
                });
#pragma warning restore 612, 618
        }
    }
}
