// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PriceComparisonWebsite.Data;

#nullable disable

namespace PriceComparisonWebsite.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250512125649_addedPriceHistorySeedData")]
    partial class addedPriceHistorySeedData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PriceComparisonWebsite.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("PriceComparisonWebsite.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            Name = "Electronics"
                        },
                        new
                        {
                            CategoryId = 2,
                            Name = "Tools"
                        },
                        new
                        {
                            CategoryId = 3,
                            Name = "Clothing"
                        },
                        new
                        {
                            CategoryId = 4,
                            Name = "Food"
                        },
                        new
                        {
                            CategoryId = 5,
                            Name = "Pet Items"
                        },
                        new
                        {
                            CategoryId = 6,
                            Name = "Toys"
                        },
                        new
                        {
                            CategoryId = 7,
                            Name = "Stationary"
                        },
                        new
                        {
                            CategoryId = 8,
                            Name = "Drinks"
                        },
                        new
                        {
                            CategoryId = 9,
                            Name = "Games"
                        },
                        new
                        {
                            CategoryId = 10,
                            Name = "Books"
                        },
                        new
                        {
                            CategoryId = 11,
                            Name = "Furniture"
                        },
                        new
                        {
                            CategoryId = 12,
                            Name = "Beauty"
                        },
                        new
                        {
                            CategoryId = 13,
                            Name = "Sports"
                        },
                        new
                        {
                            CategoryId = 14,
                            Name = "Health"
                        },
                        new
                        {
                            CategoryId = 15,
                            Name = "Music"
                        },
                        new
                        {
                            CategoryId = 16,
                            Name = "Movies"
                        },
                        new
                        {
                            CategoryId = 17,
                            Name = "Travel"
                        },
                        new
                        {
                            CategoryId = 18,
                            Name = "Gifts"
                        });
                });

            modelBuilder.Entity("PriceComparisonWebsite.Models.LoginActivity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ErrorMessage")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<bool>("IsSuccessful")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LoginTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("LoginActivities");
                });

            modelBuilder.Entity("PriceComparisonWebsite.Models.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsGlobal")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("PriceComparisonWebsite.Models.PriceListing", b =>
                {
                    b.Property<int>("PriceListingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PriceListingId"));

                    b.Property<DateTime>("DateListed")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("DiscountedPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("PurchaseUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VendorId")
                        .HasColumnType("int");

                    b.HasKey("PriceListingId");

                    b.HasIndex("ProductId");

                    b.HasIndex("VendorId");

                    b.ToTable("PriceListings");

                    b.HasData(
                        new
                        {
                            PriceListingId = 1,
                            DateListed = new DateTime(2025, 3, 14, 14, 52, 37, 413, DateTimeKind.Unspecified).AddTicks(3597),
                            DiscountedPrice = 7.50m,
                            Price = 15.60m,
                            ProductId = 1,
                            PurchaseUrl = "https://www.amazon.co.uk/Pepsi-Max-Cans-330ml-Pack/dp/B017NVHSF8/259-3693489-2210466",
                            VendorId = 1
                        },
                        new
                        {
                            PriceListingId = 2,
                            DateListed = new DateTime(2025, 3, 14, 14, 52, 45, 283, DateTimeKind.Unspecified).AddTicks(3811),
                            DiscountedPrice = 4.87m,
                            Price = 10.79m,
                            ProductId = 2,
                            PurchaseUrl = "https://www.amazon.co.uk/Gorilla-4044205-Superglue-15g/dp/B003CT4XT0/259-3693489-2210466",
                            VendorId = 1
                        },
                        new
                        {
                            PriceListingId = 3,
                            DateListed = new DateTime(2025, 3, 14, 14, 52, 39, 768, DateTimeKind.Unspecified).AddTicks(8507),
                            DiscountedPrice = 11.50m,
                            Price = 11.50m,
                            ProductId = 1,
                            PurchaseUrl = "https://www.tesco.com/groceries/en-GB/products/282774907",
                            VendorId = 11
                        },
                        new
                        {
                            PriceListingId = 4,
                            DateListed = new DateTime(2025, 3, 14, 14, 52, 51, 812, DateTimeKind.Unspecified).AddTicks(2214),
                            DiscountedPrice = 5.03m,
                            Price = 12.85m,
                            ProductId = 3,
                            PurchaseUrl = "https://www.amazon.co.uk/UNO-W2087-Card-Game-European/dp/B005I5M2F8",
                            VendorId = 1
                        },
                        new
                        {
                            PriceListingId = 5,
                            DateListed = new DateTime(2025, 3, 14, 14, 52, 49, 664, DateTimeKind.Unspecified).AddTicks(9873),
                            DiscountedPrice = 3.85m,
                            Price = 3.85m,
                            ProductId = 3,
                            PurchaseUrl = "https://www.ebay.co.uk/itm/175594341144",
                            VendorId = 2
                        },
                        new
                        {
                            PriceListingId = 16,
                            DateListed = new DateTime(2025, 3, 14, 14, 52, 55, 812, DateTimeKind.Unspecified).AddTicks(2214),
                            DiscountedPrice = 319.19m,
                            Price = 327.59m,
                            ProductId = 4,
                            PurchaseUrl = "https://www.newegg.com/global/uk-en/amd-ryzen-7-9700x-ryzen-7-9000-series-granite-ridge-socket-am5-processor/p/N82E16819113843",
                            VendorId = 3
                        },
                        new
                        {
                            PriceListingId = 17,
                            DateListed = new DateTime(2025, 3, 14, 14, 52, 57, 812, DateTimeKind.Unspecified).AddTicks(2214),
                            DiscountedPrice = 280.17m,
                            Price = 298.00m,
                            ProductId = 4,
                            PurchaseUrl = "https://www.amazon.co.uk/AMD-Ryzensets-9700X-Processor-frequency/dp/B0D6NMDNNX",
                            VendorId = 1
                        },
                        new
                        {
                            PriceListingId = 18,
                            DateListed = new DateTime(2025, 3, 14, 14, 52, 59, 812, DateTimeKind.Unspecified).AddTicks(2214),
                            DiscountedPrice = 827.99m,
                            Price = 827.99m,
                            ProductId = 5,
                            PurchaseUrl = "https://www.newegg.com/global/uk-en/aspire-14-ai/p/N82E16834360378",
                            VendorId = 3
                        });
                });

            modelBuilder.Entity("PriceComparisonWebsite.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<decimal>("CheapestPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("ProductId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            CategoryId = 4,
                            CheapestPrice = 7.50m,
                            Description = "Diet type: VegetarianIngredients:Carbonated Water, Colour (E150d), Sweeteners (Aspartame, Acesulfame K), Acids (Phosphoric Acid, Citric Acid), Flavourings (Including Caffeine), Preservative (Potassium Sorbate). Contains a Source of Phenylalanin.",
                            ImageUrl = "https://m.media-amazon.com/images/I/61zIvU-0TDL.__AC_SX300_SY300_QL70_ML2_.jpg",
                            Name = "Pepsi Max No Sugar Cola Cans 24 x 330ml"
                        },
                        new
                        {
                            ProductId = 2,
                            CategoryId = 2,
                            CheapestPrice = 4.87m,
                            Description = "IMPACT TOUGH Formulated for impact resistance and strength. FAST SETTING Dries in just 10 - 45 seconds, with no gripping required. ANTI-CLOG CAP Keeps Super Glue from drying out. BONDS Metal, wood, ceramic, paper, rubber & plastics (not PP or PE) and more! FILL LINE Bottle is not full, it is filled to 15g fill line to allow liquid to flow. PREPARATION Protect work area from spills. Clean and dry the surfaces to be bonded. To puncture seal on tube, tighten white nozzle firmly. APPLY Apply a small amount of Gorilla Super Glue to one surface. Only one drop per 6.5cm2 recommended. Set time can vary based on amount of glue and type of surface glued. Excess glue can cause delayed or failed bond. PRESS Press the two surfaces together between 10-45 seconds. Wait 24 hours for full cure",
                            ImageUrl = "https://m.media-amazon.com/images/I/81GVBVWnryS._AC_SX679_.jpg",
                            Name = "Gorilla Super Glue, 15g"
                        },
                        new
                        {
                            ProductId = 3,
                            CategoryId = 9,
                            CheapestPrice = 3.85m,
                            Description = "The classic card game of matching colors and numbers. Special Action Cards and Wild Cards for unexpected excitement and game-changing fun. Use the Swap Hands cards to change hands with any other opponent. Write your own rules for game play with the Customizable Wild cards. Players take turns matching a card in their hand with the color or number of the card shown on the top of the deck. Special graphic symbols have been added to each card to help identify the color(s) on that card. This will allow players with ANY form of color blindness to easily play! Don't forget to shout \"UNO\" when you only have one card remaining!",
                            ImageUrl = "https://m.media-amazon.com/images/I/71MrrNB7jCL._AC_SX679_.jpg",
                            Name = "UNO"
                        },
                        new
                        {
                            ProductId = 4,
                            CategoryId = 1,
                            CheapestPrice = 280.17m,
                            Description = "The AMD Ryzen 7 9700X is a high-performance processor designed for gaming and content creation. It features 8 cores and 16 threads, with a base clock speed of 3.8 GHz and a boost clock speed of up to 4.5 GHz. The processor is built on the 7nm process technology and supports DDR4 memory up to 3200 MHz. It also includes support for PCIe 4.0, allowing for faster data transfer rates with compatible devices. The Ryzen 7 9700X is compatible with AM4 motherboards and has a TDP of 105W.",
                            ImageUrl = "https://m.media-amazon.com/images/I/61F3ZChalyL._AC_SX679_.jpg",
                            Name = "AMD Ryzen 7 9700X Processor"
                        },
                        new
                        {
                            ProductId = 5,
                            CategoryId = 1,
                            CheapestPrice = 827.99m,
                            Description = "Intel Core Ultra 7 256V, 16GB LPDDR5X Onboard Memory Memory / 1 TB PCIe SSD, Intel Arc Graphics 140V, Non-Touch Screen, 1920 x 1200, Windows 11 Home",
                            ImageUrl = "https://c1.neweggimages.com/ProductImageCompressAll60/34-360-378-03.jpg",
                            Name = "Acer Aspire 14 AI Copilot+ PC 14.0 Touchscreen Laptop Ultra 7 256V 16GB RAM 1TB SSD Windows 11 Home A14-52M-72FH"
                        });
                });

            modelBuilder.Entity("PriceComparisonWebsite.Models.ProductPriceHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductPriceHistories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Price = 7.50m,
                            ProductId = 1,
                            Timestamp = new DateTime(2025, 3, 14, 14, 52, 37, 413, DateTimeKind.Unspecified).AddTicks(3597)
                        },
                        new
                        {
                            Id = 2,
                            Price = 4.87m,
                            ProductId = 2,
                            Timestamp = new DateTime(2025, 3, 14, 14, 52, 45, 283, DateTimeKind.Unspecified).AddTicks(3811)
                        },
                        new
                        {
                            Id = 3,
                            Price = 3.85m,
                            ProductId = 3,
                            Timestamp = new DateTime(2025, 3, 14, 14, 52, 49, 664, DateTimeKind.Unspecified).AddTicks(9873)
                        },
                        new
                        {
                            Id = 4,
                            Price = 280.17m,
                            ProductId = 4,
                            Timestamp = new DateTime(2025, 3, 14, 14, 52, 57, 812, DateTimeKind.Unspecified).AddTicks(2214)
                        },
                        new
                        {
                            Id = 5,
                            Price = 827.99m,
                            ProductId = 5,
                            Timestamp = new DateTime(2025, 3, 14, 14, 52, 59, 812, DateTimeKind.Unspecified).AddTicks(2214)
                        });
                });

            modelBuilder.Entity("PriceComparisonWebsite.Models.ScraperStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ScraperStatus");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            LastUpdated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("PriceComparisonWebsite.Models.UserNotification", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnOrder(0);

                    b.Property<int>("NotificationId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.HasKey("UserId", "NotificationId");

                    b.HasIndex("NotificationId");

                    b.ToTable("UserNotifications");
                });

            modelBuilder.Entity("PriceComparisonWebsite.Models.UserViewingHistory", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnOrder(0);

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<DateTime>("LastViewed")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("UserViewingHistories");
                });

            modelBuilder.Entity("PriceComparisonWebsite.Models.UserWishList", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnOrder(0);

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<decimal>("LastCheapestPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("UserId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("UserWishLists");
                });

            modelBuilder.Entity("PriceComparisonWebsite.Models.Vendor", b =>
                {
                    b.Property<int>("VendorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VendorId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool>("SupportsAutomaticUpdates")
                        .HasColumnType("bit");

                    b.Property<string>("VendorLogoUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VendorUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VendorId");

                    b.ToTable("Vendors");

                    b.HasData(
                        new
                        {
                            VendorId = 1,
                            Name = "Amazon",
                            SupportsAutomaticUpdates = true,
                            VendorLogoUrl = "https://upload.wikimedia.org/wikipedia/commons/a/a9/Amazon_logo.svg",
                            VendorUrl = "https://www.amazon.co.uk"
                        },
                        new
                        {
                            VendorId = 2,
                            Name = "eBay",
                            SupportsAutomaticUpdates = false,
                            VendorLogoUrl = "https://upload.wikimedia.org/wikipedia/commons/1/1b/EBay_logo.svg",
                            VendorUrl = "https://www.ebay.co.uk"
                        },
                        new
                        {
                            VendorId = 11,
                            Name = "Tesco",
                            SupportsAutomaticUpdates = false,
                            VendorLogoUrl = "https://upload.wikimedia.org/wikipedia/en/thumb/b/b0/Tesco_Logo.svg/2560px-Tesco_Logo.svg.png",
                            VendorUrl = "https://www.tesco.com/"
                        },
                        new
                        {
                            VendorId = 3,
                            Name = "Newegg",
                            SupportsAutomaticUpdates = true,
                            VendorLogoUrl = "https://c1.neweggimages.com/WebResource/Themes/Nest/logos/Newegg_full_color_logo_RGB.SVG",
                            VendorUrl = "https://www.newegg.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("PriceComparisonWebsite.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("PriceComparisonWebsite.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PriceComparisonWebsite.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("PriceComparisonWebsite.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PriceComparisonWebsite.Models.LoginActivity", b =>
                {
                    b.HasOne("PriceComparisonWebsite.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PriceComparisonWebsite.Models.PriceListing", b =>
                {
                    b.HasOne("PriceComparisonWebsite.Models.Product", "Product")
                        .WithMany("PriceListings")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PriceComparisonWebsite.Models.Vendor", "Vendor")
                        .WithMany("PriceListings")
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("PriceComparisonWebsite.Models.Product", b =>
                {
                    b.HasOne("PriceComparisonWebsite.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("PriceComparisonWebsite.Models.ProductPriceHistory", b =>
                {
                    b.HasOne("PriceComparisonWebsite.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("PriceComparisonWebsite.Models.UserNotification", b =>
                {
                    b.HasOne("PriceComparisonWebsite.Models.Notification", "Notification")
                        .WithMany("UserNotifications")
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PriceComparisonWebsite.Models.ApplicationUser", "User")
                        .WithMany("UserNotifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Notification");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PriceComparisonWebsite.Models.UserViewingHistory", b =>
                {
                    b.HasOne("PriceComparisonWebsite.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PriceComparisonWebsite.Models.ApplicationUser", "User")
                        .WithMany("ViewingHistory")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PriceComparisonWebsite.Models.UserWishList", b =>
                {
                    b.HasOne("PriceComparisonWebsite.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PriceComparisonWebsite.Models.ApplicationUser", "User")
                        .WithMany("WishList")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PriceComparisonWebsite.Models.ApplicationUser", b =>
                {
                    b.Navigation("UserNotifications");

                    b.Navigation("ViewingHistory");

                    b.Navigation("WishList");
                });

            modelBuilder.Entity("PriceComparisonWebsite.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("PriceComparisonWebsite.Models.Notification", b =>
                {
                    b.Navigation("UserNotifications");
                });

            modelBuilder.Entity("PriceComparisonWebsite.Models.Product", b =>
                {
                    b.Navigation("PriceListings");
                });

            modelBuilder.Entity("PriceComparisonWebsite.Models.Vendor", b =>
                {
                    b.Navigation("PriceListings");
                });
#pragma warning restore 612, 618
        }
    }
}
